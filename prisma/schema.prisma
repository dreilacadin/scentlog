// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    perfumes      Perfume[]
    accounts      Account[]
    sessions      Session[]
    logs          Log[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
}

enum Role {
    USER
    ADMIN
}

model Perfume {
    id        String     @id @default(cuid())
    name      String     @unique
    image     String?
    batchCode String
    category  Category[]
    logs      Log[]
    owners    User[]
    brand     Brand      @relation(fields: [brandId], references: [id])
    brandId   String     @unique

    @@index([name])
}

model Brand {
    id       String    @id @default(cuid())
    name     String
    logo     String?
    perfumes Perfume[]

    @@unique([name])
}

model Category {
    id   String @id @default(cuid())
    name String @db.VarChar(10)

    Perfume   Perfume? @relation(fields: [perfumeId], references: [id])
    perfumeId String?  @unique
}

model Log {
    id          String    @id @default(cuid())
    user        User      @relation(fields: [userId], references: [id])
    userId      String    @unique
    perfume     Perfume   @relation(fields: [perfumeId], references: [id])
    perfumeId   String
    timeStarted DateTime  @default(now())
    timeEnded   DateTime?
    updatedAt   DateTime  @updatedAt
}
